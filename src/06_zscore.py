# === Script 06 - D√©tection des vins mill√©sim√©s (version attendue : 30 vins) ===

# ==============================================================================
# üîß IMPORTS DES LIBRAIRIES
# ==============================================================================

# duckdb : moteur SQL l√©ger pour l‚Äôanalyse locale des donn√©es.
import duckdb

# pandas : pour manipuler les r√©sultats SQL en DataFrame et effectuer des calculs.
import pandas as pd

# pathlib : permet une gestion multiplateforme des chemins de fichiers et dossiers.
from pathlib import Path

# loguru : biblioth√®que de logging moderne et facile √† utiliser pour tracer les √©tapes du script.
from loguru import logger

import sys

logger.remove()
logger.add(sys.stdout, level="INFO", filter=lambda record: record["level"].name == "INFO")
logger.add(sys.stderr, level="WARNING")  # warnings, errors et criticals

# ==============================================================================
# üìÇ CONFIGURATION DES DOSSIERS ET DU LOGGING
# ==============================================================================

# Cr√©ation du dossier des logs s‚Äôil n‚Äôexiste pas
LOGS_PATH = Path("logs")
LOGS_PATH.mkdir(parents=True, exist_ok=True)

# Ajout d‚Äôun fichier de log avec rotation automatique √† 500 Ko
logger.add(LOGS_PATH / "zscore.log", level="INFO", rotation="500 KB")

# Cr√©ation du dossier des fichiers de sortie
OUTPUT_PATH = Path("data/outputs")
OUTPUT_PATH.mkdir(parents=True, exist_ok=True)


# ==============================================================================
# üîå CONNEXION √Ä LA BASE DUCKDB
# ==============================================================================

try:
    con = duckdb.connect("data.duckdb")
    logger.info("ü¶Ü Connexion √† DuckDB √©tablie.")
except Exception as e:
    logger.error(f"‚ùå Connexion √©chou√©e : {e}")
    exit(1)


# ==============================================================================
# üìä CHARGEMENT DES DONN√âES & CALCUL DU Z-SCORE
# ==============================================================================

try:
    # Requ√™te SQL pour r√©cup√©rer les produits avec un prix renseign√©
    df = con.execute("""
        SELECT product_id, post_title, price
        FROM fusion
        WHERE price IS NOT NULL
    """).fetchdf()

    # Calcul du Z-score sur la colonne "price"
    df["z_score"] = (df["price"] - df["price"].mean()) / df["price"].std()

    # Classification : un vin est "mill√©sim√©" si son Z-score > 2
    df["type"] = df["z_score"].apply(lambda z: "mill√©sim√©" if z > 2 else "ordinaire")

    # Comptage pour le suivi m√©tier
    nb_millesimes = (df["type"] == "mill√©sim√©").sum()
    nb_total = len(df)

    logger.info(f"üç∑ Vins mill√©sim√©s d√©tect√©s (z > 2) : {nb_millesimes} (attendu : 30)")
    logger.info(f"üì¶ Vins ordinaires : {nb_total - nb_millesimes}")

    # --- APER√áU DES R√âSULTATS ---
    # Top 5 des vins mill√©sim√©s les plus atypiques
    top5 = df[df["type"] == "mill√©sim√©"].sort_values("z_score", ascending=False).head(5)
    logger.debug("üèÜ Top 5 vins mill√©sim√©s :")
    logger.debug(top5[["product_id", "post_title", "price", "z_score"]].to_string(index=False))

    # --- EXPORT DES DONN√âES ---
    df[df["type"] == "mill√©sim√©"].to_csv(OUTPUT_PATH / "vins_millesimes.csv", index=False)
    df[df["type"] == "ordinaire"].to_csv(OUTPUT_PATH / "vins_ordinaires.csv", index=False)
    logger.success("üìÅ Export : vins_millesimes.csv & vins_ordinaires.csv")

except Exception as e:
    logger.error(f"‚ùå Erreur durant le traitement Z-score : {e}")
    exit(1)


# ==============================================================================
# ‚úÖ TESTS DE VALIDATION DES DONN√âES
# ==============================================================================

try:
    # V√©rification du nombre attendu de vins mill√©sim√©s
    assert nb_millesimes == 30, f"‚ùå Nombre de vins mill√©sim√©s incorrect : {nb_millesimes} (attendu : 30)"

    # V√©rification de l'absence de valeurs nulles
    assert df[["price", "z_score"]].isnull().sum().sum() == 0, "‚ùå Valeurs nulles dans price ou z_score"

    # V√©rification de l'absence de valeurs infinies (cas de division par 0)
    assert df["z_score"].isin([float('inf'), float('-inf')]).sum() == 0, "‚ùå Z-scores infinis d√©tect√©s"

    logger.success("üß™ Tests de coh√©rence Z-score valid√©s ‚úÖ")

except Exception as e:
    logger.error(f"‚ùå √âchec dans les tests de validation Z-score : {e}")
    exit(1)
