# === Script 00 - T√©l√©chargement et extraction ZIP (avec loguru) ===
# Ce script t√©l√©charge une archive ZIP depuis une URL, l'extrait localement,
# puis v√©rifie la pr√©sence des fichiers Excel attendus, tout en journalisant
# chaque √©tape via loguru.

import requests                         # Librairie pour effectuer des requ√™tes HTTP (telechargement de fichiers)
from zipfile import ZipFile             # Module pour manipuler les archives ZIP
from io import BytesIO                  # Permet de traiter un flux d'octets en m√©moire comme un fichier
from pathlib import Path                # Gestion portable des chemins de fichiers
from loguru import logger                # Logger performant pour tracer les √©v√©nements et erreurs

# ------------------------------------------------------------------------------
# Configuration des logs
# - Cr√©e le dossier de logs
# - Ajoute un fichier de log avec rotation
# ------------------------------------------------------------------------------
LOGS_PATH = Path("data/logs")
LOGS_PATH.mkdir(parents=True, exist_ok=True)  # Cr√©e le r√©pertoire et parents sans erreur s'il existe
# Fichier de log : niveau INFO, rotation tous les 500 KB
logger.add(LOGS_PATH / "download_extract.log", level="INFO", rotation="500 KB")

# ------------------------------------------------------------------------------
# Param√®tres de configuration
# ------------------------------------------------------------------------------
ZIP_URL = (
    "https://s3.eu-west-1.amazonaws.com/course.oc-static.com/projects/922_Data+Engineer/"
    "922_P10/bottleneck.zip"
)
RAW_PATH = Path("data/raw")              # R√©pertoire o√π stocker l'archive et son contenu
EXTRACTED_PATH = RAW_PATH / "bottleneck"  # Sous-dossier cr√©√© apr√®s extraction

# Cr√©e le dossier `data/raw` si n√©cessaire
RAW_PATH.mkdir(parents=True, exist_ok=True)

logger.info("üì¶ T√©l√©chargement de l‚Äôarchive en cours...")

# ------------------------------------------------------------------------------
# √âtape 1 : T√©l√©chargement de l'archive ZIP
# ------------------------------------------------------------------------------
try:
    response = requests.get(ZIP_URL)       # Envoie la requ√™te GET
    response.raise_for_status()            # V√©rifie le code HTTP (l√®ve en cas d'erreur)
    logger.success("‚úÖ Archive t√©l√©charg√©e avec succ√®s.")
except Exception as e:
    logger.error(f"‚ùå Erreur lors du t√©l√©chargement : {e}")
    exit(1)                                 # Quitte le script en cas d'erreur

# ------------------------------------------------------------------------------
# √âtape 2 : Extraction du contenu de l'archive ZIP
# ------------------------------------------------------------------------------
try:
    # Utilise BytesIO pour lire les octets t√©l√©charg√©s comme un fichier ZIP
    with ZipFile(BytesIO(response.content)) as zip_ref:
        zip_ref.extractall(RAW_PATH)       # Extrait tous les fichiers dans RAW_PATH
    logger.success(f"‚úÖ Archive extraite dans : {EXTRACTED_PATH.resolve()}")
except Exception as e:
    logger.error(f"‚ùå Erreur lors de l‚Äôextraction : {e}")
    exit(1)

# ------------------------------------------------------------------------------
# √âtape 3 : Validation de la pr√©sence des fichiers Excel attendus
# ------------------------------------------------------------------------------
expected_files = [
    "Fichier_erp.xlsx",
    "Fichier_web.xlsx",
    "fichier_liaison.xlsx"
]

# V√©rifie l'existence de chaque fichier dans le dossier extrait
missing = [f for f in expected_files if not (EXTRACTED_PATH / f).exists()]

if missing:
    # Log et sortie en erreur si un ou plusieurs fichiers manquent
    logger.error(f"‚ùå Fichiers manquants apr√®s extraction : {missing}")
    exit(1)

# Log de succ√®s et listing des fichiers trouv√©s
logger.success("‚úÖ Tous les fichiers Excel attendus sont pr√©sents :")
for f in expected_files:
    logger.info(f"   - bottleneck/{f}")
