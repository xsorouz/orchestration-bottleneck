# === Script 00 - T√©l√©chargement et extraction ZIP (robuste et compatible S3) ===
# Ce script t√©l√©charge une archive ZIP depuis une URL, l'extrait localement
# dans un dossier 'data/raw/', avec nettoyage des noms de fichiers pour √©viter
# tout probl√®me d'upload futur vers MinIO/S3. Tous les √©v√©nements sont journalis√©s.

import requests
from zipfile import ZipFile
from io import BytesIO
from pathlib import Path
import unicodedata
import re
from loguru import logger
import sys
import warnings

warnings.filterwarnings("ignore")

# ==============================================================================
# Configuration des logs
# ==============================================================================
logger.remove()
logger.add(sys.stdout, level="INFO", filter=lambda record: record["level"].name == "INFO")
logger.add(sys.stderr, level="WARNING")

LOGS_PATH = Path("logs")
LOGS_PATH.mkdir(parents=True, exist_ok=True)
logger.add(LOGS_PATH / "download_extract.log", level="INFO", rotation="500 KB")

# ==============================================================================
# Param√®tres du t√©l√©chargement
# ==============================================================================
ZIP_URL = (
    "https://s3.eu-west-1.amazonaws.com/course.oc-static.com/projects/922_Data+Engineer/"
    "922_P10/bottleneck.zip"
)
RAW_PATH = Path("data/raw")    # R√©pertoire cible des fichiers extraits
RAW_PATH.mkdir(parents=True, exist_ok=True)

# ==============================================================================
# Fonction utilitaire : normalisation s√©curis√©e des noms de fichiers
# ==============================================================================
def normalize_filename(filename: str) -> str:
    nfkd_form = unicodedata.normalize('NFKD', filename)
    only_ascii = nfkd_form.encode('ASCII', 'ignore').decode('ASCII')
    safe = re.sub(r'[^A-Za-z0-9_.-]', '_', only_ascii)
    return safe

# ==============================================================================
# √âtape 1 : T√©l√©chargement de l'archive ZIP
# ==============================================================================
logger.info("üì¶ D√©but du t√©l√©chargement de l'archive ZIP...")

try:
    response = requests.get(ZIP_URL)
    response.raise_for_status()
    logger.success("‚úÖ Archive ZIP t√©l√©charg√©e avec succ√®s.")
except Exception as e:
    logger.error(f"‚ùå Erreur lors du t√©l√©chargement : {e}")
    sys.exit(1)

# ==============================================================================
# √âtape 2 : Extraction s√©curis√©e du contenu de l'archive
# ==============================================================================
logger.info("üìÇ D√©but de l'extraction de l'archive...")

try:
    with ZipFile(BytesIO(response.content)) as zip_ref:
        for member in zip_ref.infolist():
            original_name = Path(member.filename).name
            if not original_name:
                continue  # Ignore les r√©pertoires vides

            safe_name = normalize_filename(original_name)
            target_path = RAW_PATH / safe_name

            # √âcriture s√©curis√©e
            with open(target_path, "wb") as f_out:
                f_out.write(zip_ref.read(member))
            
            logger.info(f"‚úÖ Fichier extrait et normalis√© : {safe_name}")

    logger.success(f"‚úÖ Extraction compl√®te vers '{RAW_PATH.resolve()}'")
except Exception as e:
    logger.error(f"‚ùå Erreur lors de l'extraction : {e}")
    sys.exit(1)

# ==============================================================================
# √âtape 3 : Validation finale de la pr√©sence des fichiers attendus
# ==============================================================================
expected_files = [
    "Fichier_erp.xlsx",
    "Fichier_web.xlsx",
    "fichier_liaison.xlsx",
]
expected_files_normalized = [normalize_filename(f) for f in expected_files]

missing_files = [f for f in expected_files_normalized if not (RAW_PATH / f).exists()]

if missing_files:
    logger.error(f"‚ùå Fichiers manquants apr√®s extraction : {missing_files}")
    sys.exit(1)

logger.success("üéØ Tous les fichiers Excel attendus sont pr√©sents apr√®s extraction :")
for f in expected_files_normalized:
    logger.info(f"   - {f}")

logger.success("üéâ T√©l√©chargement et extraction termin√©s sans erreur.")

