# === Script 05 - Calcul du chiffre d'affaires (version finale valid√©e) ===

# ==============================================================================
# üîß IMPORTS DES LIBRAIRIES
# ==============================================================================

# duckdb : moteur de base de donn√©es relationnelle rapide et l√©ger, utilis√© ici en local.
import duckdb

# pandas : pour manipuler les r√©sultats SQL sous forme de DataFrames et faciliter les exports.
import pandas as pd

# pathlib : permet de g√©rer les chemins de fichiers/dossiers de mani√®re propre et multiplateforme.
from pathlib import Path

# loguru : biblioth√®que de logging moderne et √©l√©gante, utilis√©e pour journaliser chaque √©tape.
from loguru import logger

logger.remove()
logger.add(sys.stdout, level="INFO", filter=lambda record: record["level"].name == "INFO")
logger.add(sys.stderr, level="WARNING")  # warnings, errors et criticals

# ==============================================================================
# üìÇ CONFIGURATION DES CHEMINS ET DES LOGS
# ==============================================================================

# Cr√©ation du dossier "logs" s‚Äôil n‚Äôexiste pas
LOGS_PATH = Path("logs")
LOGS_PATH.mkdir(parents=True, exist_ok=True)

# Configuration du fichier de log avec rotation automatique √† 500 Ko
logger.add(LOGS_PATH / "ca.log", level="INFO", rotation="500 KB")

# Cr√©ation du dossier "data/outputs" pour enregistrer les fichiers de sortie
OUTPUT_PATH = Path("data/outputs")
OUTPUT_PATH.mkdir(parents=True, exist_ok=True)


# ==============================================================================
# üîå CONNEXION √Ä LA BASE DUCKDB
# ==============================================================================

try:
    # Connexion √† la base locale DuckDB (fichier data.duckdb)
    con = duckdb.connect("data.duckdb")
    logger.info("ü¶Ü Connexion √† DuckDB √©tablie.")
except Exception as e:
    logger.error(f"‚ùå Erreur de connexion √† DuckDB : {e}")
    exit(1)


# ==============================================================================
# üìà CALCUL DU CHIFFRE D'AFFAIRES PAR PRODUIT
# ==============================================================================

try:
    # Cr√©ation d'une table contenant le CA par produit, uniquement pour les produits en stock
    con.execute("""
        CREATE OR REPLACE TABLE ca_par_produit AS
        SELECT
            product_id,
            post_title,
            price,
            stock_quantity,
            ROUND(price * stock_quantity, 2) AS chiffre_affaires
        FROM fusion
        WHERE stock_quantity > 0
          AND stock_status = 'instock'
    """)
    logger.success("‚úÖ Table ca_par_produit cr√©√©e avec filtrage stock_quantity > 0 et stock_status = 'instock'.")

    # Cr√©ation d‚Äôune table de synth√®se avec le CA total
    con.execute("""
        CREATE OR REPLACE TABLE ca_total AS
        SELECT ROUND(SUM(chiffre_affaires), 2) AS ca_total
        FROM ca_par_produit
    """)
    logger.success("‚úÖ Table ca_total cr√©√©e.")

except Exception as e:
    logger.error(f"‚ùå Erreur lors du calcul du CA : {e}")
    exit(1)


# ==============================================================================
# ‚úÖ VALIDATION, TESTS DE COH√âRENCE ET EXPORTS
# ==============================================================================

try:
    # Chargement des r√©sultats dans des DataFrames pandas
    df_ca = con.execute("SELECT * FROM ca_par_produit").fetchdf()
    df_total = con.execute("SELECT * FROM ca_total").fetchdf()
    ca_total = df_total['ca_total'][0]

    # --- TEST 1 : V√©rification du montant total attendu ---
    assert round(ca_total, 2) == 387837.60, f"CA total incorrect : {ca_total} ‚Ç¨ (attendu : 387 837.60 ‚Ç¨)"
    logger.success(f"üí∞ CA TOTAL = {ca_total:,.2f} ‚Ç¨ ‚úÖ")
    logger.info(f"üì¶ Produits comptabilis√©s : {len(df_ca)}")

    # --- TEST 2 : Tests de coh√©rence des donn√©es ---
    assert len(df_ca) == 573, f"‚ùå Le nombre de lignes dans ca_par_produit est incorrect : {len(df_ca)} (attendu : 573)"
    assert df_ca[["price", "stock_quantity", "chiffre_affaires"]].isnull().sum().sum() == 0, "‚ùå Valeurs nulles d√©tect√©es"
    assert (df_ca["chiffre_affaires"] < 0).sum() == 0, "‚ùå CA n√©gatif d√©tect√©"
    logger.success("üß™ Tests de coh√©rence des donn√©es CA valid√©s ‚úÖ")

    # --- STATISTIQUES ET APER√áUS ---
    # Top 5 produits par CA
    top_5 = df_ca.sort_values("chiffre_affaires", ascending=False).head(5)
    logger.debug("üèÜ Top 5 produits par chiffre d'affaires :")
    logger.debug(top_5[["product_id", "post_title", "chiffre_affaires"]].to_string(index=False))

    # Produit avec le plus grand stock
    most_stock = df_ca.sort_values("stock_quantity", ascending=False).head(1)
    logger.debug("üì¶ Produit avec le PLUS de stock :")
    logger.debug(most_stock[["product_id", "post_title", "stock_quantity"]].to_string(index=False))

    # Produit le plus cher
    most_expensive = df_ca.sort_values("price", ascending=False).head(1)
    logger.debug("üí∏ Produit le PLUS CHER :")
    logger.debug(most_expensive[["product_id", "post_title", "price"]].to_string(index=False))

    # Produit au CA maximum
    top_ca = df_ca.loc[df_ca["chiffre_affaires"].idxmax()]
    logger.debug(f"üî• Produit au CA max : {top_ca['post_title']} ‚Äî {top_ca['chiffre_affaires']} ‚Ç¨")

    # Moyenne et m√©diane du CA
    logger.info(f"üìä Moyenne du CA : {df_ca['chiffre_affaires'].mean():,.2f} ‚Ç¨")
    logger.info(f"üìä M√©diane du CA : {df_ca['chiffre_affaires'].median():,.2f} ‚Ç¨")

    # --- EXPORTS DES DONN√âES ---
    df_ca.to_csv(OUTPUT_PATH / "ca_par_produit.csv", index=False)
    df_total.to_csv(OUTPUT_PATH / "ca_total.csv", index=False)
    df_ca.to_excel(OUTPUT_PATH / "ca_par_produit.xlsx", index=False)

    logger.success("üìÅ Fichiers export√©s : ca_par_produit.csv / .xlsx, ca_total.csv")

except Exception as e:
    logger.error(f"‚ùå Erreur finale du CA : {e}")
    exit(1)
