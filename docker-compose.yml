version: "3.8"

# ============================================================================
# üì¶ Volumes persistants
# ============================================================================
volumes:
  postgres-data:   # Volume pour PostgreSQL (m√©tadonn√©es Kestra)
  kestra-data:     # Volume pour le stockage interne de Kestra
  minio-data:      # Volume pour les objets stock√©s dans MinIO

# ============================================================================
# üåê R√©seau interne
# ============================================================================
networks:
  hybrid_net:
    driver: bridge

# ============================================================================
# üöÄ D√©finition des services
# ============================================================================
services:

  # --------------------------------------------------------------------------
  # üóÑÔ∏è PostgreSQL ‚Äî Base de donn√©es utilis√©e par Kestra
  # --------------------------------------------------------------------------
  postgres:
    container_name: postgres-kestra
    image: postgres
    restart: unless-stopped

    volumes:
      - postgres-data:/var/lib/postgresql/data

    environment:
      POSTGRES_DB: kestra
      POSTGRES_USER: kestra
      POSTGRES_PASSWORD: k3str4

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 30s
      timeout: 10s
      retries: 10

    networks:
      - hybrid_net

  # --------------------------------------------------------------------------
  # ‚òÅÔ∏è MinIO ‚Äî Serveur de stockage objet compatible S3
  # --------------------------------------------------------------------------
  minio:
    container_name: minio-kestra
    image: minio/minio:latest
    restart: unless-stopped

    # Lance le serveur MinIO avec API sur le port 9000 et console sur 9001
    command: server /data --address ":9000" --console-address ":9001"

    ports:
      - "9000:9000"   # API S3
      - "9001:9001"   # Console Web (http://localhost:9001)

    volumes:
      - minio-data:/data

    environment:
      # üëá Identifiants cod√©s en dur pour correspondre aux scripts Python
      MINIO_ROOT_USER: AKIAIOSFODNN7EXAMPLE
      MINIO_ROOT_PASSWORD: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY

    networks:
      - hybrid_net

  # --------------------------------------------------------------------------
  # ‚öôÔ∏è Kestra ‚Äî Orchestrateur de workflows
  # --------------------------------------------------------------------------
  kestra:
    container_name: kestra
    image: kestra/kestra:latest
    pull_policy: always
    restart: unless-stopped
    user: "root"
    command: server standalone

    ports:
      - "8080:8080"
      - "8081:8081"

    volumes:
      - kestra-data:/app/storage
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/kestra-wd:/tmp/kestra-wd

      # üîΩ R√©pertoires de scripts mont√©s dans le conteneur
      - ./src:/app/project/src
      - ./tests:/app/project/tests

    environment:
      KESTRA_CONFIGURATION: |
        datasources:
          postgres:
            url: jdbc:postgresql://postgres:5432/kestra
            driverClassName: org.postgresql.Driver
            username: kestra
            password: k3str4

        kestra:
          server:
            basicAuth:
              enabled: false
              username: "admin@example.com"
              password: kestra

          repository:
            type: postgres

          storage:
            type: s3
            s3:
              endpoint: http://minio:9000
              region: us-east-1
              bucket: bottleneck
              accessKey: AKIAIOSFODNN7EXAMPLE
              secretKey: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
              forcePathStyle: true

          queue:
            type: postgres

          tasks:
            tmpDir:
              path: /tmp/kestra-wd/tmp

          url: http://localhost:8080/

      KESTRA_PLUGINS: |
        - io.kestra.plugin.scripts.exec

    depends_on:
      postgres:
        condition: service_started
      minio:
        condition: service_started

    networks:
      - hybrid_net
